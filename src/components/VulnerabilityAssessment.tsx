
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Bug, Shield, AlertTriangle } from "lucide-react";

export const VulnerabilityAssessment = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);

  const vulnerabilities = [
    {
      id: "CVE-2023-1234",
      title: "SQL Injection in Login Form",
      severity: "high",
      target: "192.168.1.100",
      description: "Potential SQL injection vulnerability detected in authentication mechanism",
      impact: "Data breach, unauthorized access"
    },
    {
      id: "CVE-2023-5678",
      title: "Cross-Site Scripting (XSS)",
      severity: "medium",
      target: "web-server.local",
      description: "Reflected XSS vulnerability in search parameter",
      impact: "Session hijacking, data theft"
    },
    {
      id: "CVE-2023-9012",
      title: "Weak SSL/TLS Configuration",
      severity: "low",
      target: "192.168.1.101",
      description: "Server accepts weak cipher suites",
      impact: "Man-in-the-middle attacks"
    },
    {
      id: "CVE-2023-3456",
      title: "Directory Traversal",
      severity: "high",
      target: "file-server.local",
      description: "Possible directory traversal vulnerability allowing file access",
      impact: "Sensitive file disclosure"
    }
  ];

  const handleStartAssessment = () => {
    setIsScanning(true);
    setScanProgress(0);
    
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          return 100;
        }
        return prev + 8;
      });
    }, 400);

    console.log("Starting vulnerability assessment");
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high": return "bg-red-600";
      case "medium": return "bg-orange-600";
      case "low": return "bg-yellow-600";
      default: return "bg-gray-600";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "high": return <AlertTriangle size={16} className="text-red-400" />;
      case "medium": return <Bug size={16} className="text-orange-400" />;
      case "low": return <Shield size={16} className="text-yellow-400" />;
      default: return <Bug size={16} className="text-gray-400" />;
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-white">Vulnerability Assessment</h1>
        <p className="text-gray-400 mt-1">Identify and analyze security vulnerabilities</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-red-400 flex items-center gap-2">
              <AlertTriangle size={18} />
              High Risk
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-white">2</div>
            <p className="text-gray-400 text-sm">Critical vulnerabilities</p>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-orange-400 flex items-center gap-2">
              <Bug size={18} />
              Medium Risk
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-white">1</div>
            <p className="text-gray-400 text-sm">Moderate vulnerabilities</p>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-yellow-400 flex items-center gap-2">
              <Shield size={18} />
              Low Risk
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-white">1</div>
            <p className="text-gray-400 text-sm">Minor vulnerabilities</p>
          </CardContent>
        </Card>
      </div>

      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white">Assessment Control</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Button
            onClick={handleStartAssessment}
            disabled={isScanning}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {isScanning ? "Scanning..." : "Start Vulnerability Scan"}
          </Button>

          {isScanning && (
            <div>
              <div className="flex justify-between text-sm mb-2">
                <span className="text-gray-300">Assessment Progress</span>
                <span className="text-blue-400">{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2 bg-gray-700" />
            </div>
          )}
        </CardContent>
      </Card>

      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white">Discovered Vulnerabilities</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {vulnerabilities.map((vuln) => (
              <div key={vuln.id} className="p-4 bg-gray-700/50 rounded-lg border-l-4 border-l-red-500">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center gap-3">
                    {getSeverityIcon(vuln.severity)}
                    <div>
                      <h3 className="text-white font-medium">{vuln.title}</h3>
                      <p className="text-gray-400 text-sm">{vuln.id} â€¢ {vuln.target}</p>
                    </div>
                  </div>
                  <Badge className={getSeverityColor(vuln.severity)}>
                    {vuln.severity.toUpperCase()}
                  </Badge>
                </div>
                <p className="text-gray-300 text-sm mb-2">{vuln.description}</p>
                <div className="text-xs text-gray-400">
                  <strong>Impact:</strong> {vuln.impact}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
