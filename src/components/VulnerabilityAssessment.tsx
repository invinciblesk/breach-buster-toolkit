
import { useState, useEffect, useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Bug, Shield, AlertTriangle, Terminal, Play, Square, Zap, Eye, Clock, Target } from "lucide-react";

export const VulnerabilityAssessment = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [terminalOutput, setTerminalOutput] = useState<string[]>([]);
  const [currentTarget, setCurrentTarget] = useState("");
  const terminalRef = useRef<HTMLDivElement>(null);

  const vulnerabilities = [
    {
      id: "CVE-2023-1234",
      title: "SQL Injection in Login Form",
      severity: "critical",
      target: "192.168.1.100",
      description: "Potential SQL injection vulnerability detected in authentication mechanism",
      impact: "Data breach, unauthorized access",
      cvss: 9.8,
      exploitability: "High",
      status: "active"
    },
    {
      id: "CVE-2023-5678",
      title: "Cross-Site Scripting (XSS)",
      severity: "high",
      target: "web-server.local",
      description: "Reflected XSS vulnerability in search parameter",
      impact: "Session hijacking, data theft",
      cvss: 7.5,
      exploitability: "Medium",
      status: "active"
    },
    {
      id: "CVE-2023-9012",
      title: "Weak SSL/TLS Configuration",
      severity: "medium",
      target: "192.168.1.101",
      description: "Server accepts weak cipher suites",
      impact: "Man-in-the-middle attacks",
      cvss: 5.3,
      exploitability: "Low",
      status: "mitigated"
    },
    {
      id: "CVE-2023-3456",
      title: "Directory Traversal",
      severity: "critical",
      target: "file-server.local",
      description: "Possible directory traversal vulnerability allowing file access",
      impact: "Sensitive file disclosure",
      cvss: 9.1,
      exploitability: "High",
      status: "active"
    }
  ];

  const terminalMessages = [
    "[INFO] Initializing vulnerability scanner...",
    "[INFO] Loading exploit database...",
    "[SCAN] Starting port enumeration...",
    "[SCAN] Scanning ports 1-1000...",
    "[FOUND] Open port 80/tcp - HTTP",
    "[FOUND] Open port 443/tcp - HTTPS",
    "[FOUND] Open port 22/tcp - SSH",
    "[SCAN] Testing for common vulnerabilities...",
    "[VULN] SQL injection detected on /login",
    "[VULN] XSS vulnerability found in search parameter",
    "[SCAN] Analyzing SSL/TLS configuration...",
    "[WARN] Weak cipher suites detected",
    "[SCAN] Testing directory traversal...",
    "[CRITICAL] Directory traversal vulnerability confirmed",
    "[INFO] Vulnerability assessment completed",
    "[REPORT] Generated security report"
  ];

  const handleStartAssessment = () => {
    setIsScanning(true);
    setScanProgress(0);
    setTerminalOutput([]);
    setCurrentTarget("192.168.1.0/24");
    
    let messageIndex = 0;
    const messageInterval = setInterval(() => {
      if (messageIndex < terminalMessages.length) {
        setTerminalOutput(prev => [...prev, terminalMessages[messageIndex]]);
        messageIndex++;
      } else {
        clearInterval(messageInterval);
      }
    }, 800);

    const progressInterval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          setIsScanning(false);
          return 100;
        }
        return prev + 6.25;
      });
    }, 500);

    console.log("Starting vulnerability assessment");
  };

  const handleStopAssessment = () => {
    setIsScanning(false);
    setScanProgress(0);
    setTerminalOutput([]);
    console.log("Stopping vulnerability assessment");
  };

  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [terminalOutput]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-gradient-to-r from-red-600 to-red-700";
      case "high": return "bg-gradient-to-r from-orange-600 to-orange-700";
      case "medium": return "bg-gradient-to-r from-yellow-600 to-yellow-700";
      case "low": return "bg-gradient-to-r from-blue-600 to-blue-700";
      default: return "bg-gradient-to-r from-gray-600 to-gray-700";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical": return <AlertTriangle size={16} className="text-red-400" />;
      case "high": return <Bug size={16} className="text-orange-400" />;
      case "medium": return <Eye size={16} className="text-yellow-400" />;
      case "low": return <Shield size={16} className="text-blue-400" />;
      default: return <Bug size={16} className="text-gray-400" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "active": return "text-red-400 bg-red-900/30";
      case "mitigated": return "text-green-400 bg-green-900/30";
      default: return "text-gray-400 bg-gray-900/30";
    }
  };

  const criticalCount = vulnerabilities.filter(v => v.severity === "critical").length;
  const highCount = vulnerabilities.filter(v => v.severity === "high").length;
  const mediumCount = vulnerabilities.filter(v => v.severity === "medium").length;
  const lowCount = vulnerabilities.filter(v => v.severity === "low").length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header Section */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl">
              <Shield className="h-8 w-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-white via-blue-200 to-purple-300 bg-clip-text text-transparent">
              Advanced Vulnerability Assessment
            </h1>
          </div>
          <p className="text-lg text-gray-400 max-w-2xl mx-auto">
            Enterprise-grade security vulnerability detection and analysis platform
          </p>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card className="bg-gradient-to-br from-red-900/20 to-red-800/10 border-red-500/20 backdrop-blur-sm">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-red-400 text-sm font-medium uppercase tracking-wide">Critical</p>
                  <p className="text-3xl font-bold text-white mt-2">{criticalCount}</p>
                  <p className="text-red-300 text-xs mt-1">Immediate action required</p>
                </div>
                <div className="p-3 bg-red-500/20 rounded-lg">
                  <AlertTriangle className="h-8 w-8 text-red-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-orange-900/20 to-orange-800/10 border-orange-500/20 backdrop-blur-sm">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-orange-400 text-sm font-medium uppercase tracking-wide">High</p>
                  <p className="text-3xl font-bold text-white mt-2">{highCount}</p>
                  <p className="text-orange-300 text-xs mt-1">High priority fixes</p>
                </div>
                <div className="p-3 bg-orange-500/20 rounded-lg">
                  <Bug className="h-8 w-8 text-orange-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-yellow-900/20 to-yellow-800/10 border-yellow-500/20 backdrop-blur-sm">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-yellow-400 text-sm font-medium uppercase tracking-wide">Medium</p>
                  <p className="text-3xl font-bold text-white mt-2">{mediumCount}</p>
                  <p className="text-yellow-300 text-xs mt-1">Moderate risk level</p>
                </div>
                <div className="p-3 bg-yellow-500/20 rounded-lg">
                  <Eye className="h-8 w-8 text-yellow-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-blue-900/20 to-blue-800/10 border-blue-500/20 backdrop-blur-sm">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-blue-400 text-sm font-medium uppercase tracking-wide">Low</p>
                  <p className="text-3xl font-bold text-white mt-2">{lowCount}</p>
                  <p className="text-blue-300 text-xs mt-1">Low impact issues</p>
                </div>
                <div className="p-3 bg-blue-500/20 rounded-lg">
                  <Shield className="h-8 w-8 text-blue-400" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Control Panel and Terminal */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Control Panel */}
          <Card className="bg-gradient-to-br from-gray-800/50 to-gray-900/50 border-gray-700/50 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Target className="h-5 w-5 text-purple-400" />
                Assessment Control Center
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {currentTarget && (
                <div className="p-4 bg-purple-900/20 border border-purple-500/30 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <Target className="h-4 w-4 text-purple-400" />
                    <span className="text-purple-300 text-sm">Current Target</span>
                  </div>
                  <p className="text-white font-mono">{currentTarget}</p>
                </div>
              )}

              <div className="flex gap-3">
                <Button
                  onClick={handleStartAssessment}
                  disabled={isScanning}
                  className="flex-1 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white border-0"
                >
                  <Play size={16} className="mr-2" />
                  {isScanning ? "Scanning..." : "Start Assessment"}
                </Button>
                <Button
                  onClick={handleStopAssessment}
                  disabled={!isScanning}
                  variant="destructive"
                  className="bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800"
                >
                  <Square size={16} className="mr-2" />
                  Stop
                </Button>
              </div>

              {isScanning && (
                <div className="space-y-3">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-300 flex items-center gap-2">
                      <Zap className="h-4 w-4" />
                      Assessment Progress
                    </span>
                    <span className="text-green-400 font-mono">{scanProgress.toFixed(1)}%</span>
                  </div>
                  <Progress 
                    value={scanProgress} 
                    className="h-3 bg-gray-700/50 border border-gray-600/50" 
                  />
                  <div className="flex items-center gap-2 text-xs text-gray-400">
                    <Clock className="h-3 w-3" />
                    <span>ETA: {Math.max(0, Math.round((100 - scanProgress) * 0.5))}s remaining</span>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Terminal Output */}
          <Card className="bg-black/90 border-green-500/30 backdrop-blur-sm">
            <CardHeader className="pb-3">
              <CardTitle className="text-green-400 flex items-center gap-2 font-mono text-sm">
                <Terminal className="h-4 w-4" />
                root@vuln-scanner:~$
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div 
                ref={terminalRef}
                className="bg-black/50 border border-green-500/20 rounded-lg p-4 h-64 overflow-y-auto font-mono text-sm"
              >
                {terminalOutput.length === 0 ? (
                  <div className="text-green-600/50">
                    Waiting for scan to start...<span className="animate-pulse">_</span>
                  </div>
                ) : (
                  terminalOutput.map((line, index) => (
                    <div key={index} className="mb-1">
                      <span className="text-green-500 mr-2">[{new Date().toLocaleTimeString()}]</span>
                      <span className={
                        line.includes('[CRITICAL]') ? 'text-red-400' :
                        line.includes('[VULN]') ? 'text-orange-400' :
                        line.includes('[WARN]') ? 'text-yellow-400' :
                        line.includes('[FOUND]') ? 'text-blue-400' :
                        line.includes('[INFO]') || line.includes('[REPORT]') ? 'text-green-400' :
                        'text-green-300'
                      }>
                        {line}
                      </span>
                    </div>
                  ))
                )}
                {isScanning && (
                  <div className="text-green-400 animate-pulse">
                    <span className="mr-2">[{new Date().toLocaleTimeString()}]</span>
                    Scanning...<span className="animate-pulse">_</span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Vulnerabilities List */}
        <Card className="bg-gradient-to-br from-gray-800/50 to-gray-900/50 border-gray-700/50 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <Bug className="h-5 w-5 text-red-400" />
              Detected Vulnerabilities
              <Badge className="bg-red-900/50 text-red-300 border-red-500/30">
                {vulnerabilities.length} Total
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <div key={vuln.id} className="group hover:bg-gray-800/30 transition-all duration-200 p-4 rounded-lg border border-gray-700/30">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-3">
                      {getSeverityIcon(vuln.severity)}
                      <div>
                        <h3 className="text-white font-semibold group-hover:text-blue-300 transition-colors">
                          {vuln.title}
                        </h3>
                        <div className="flex items-center gap-3 mt-1">
                          <p className="text-gray-400 text-sm">{vuln.id}</p>
                          <span className="text-gray-500">•</span>
                          <p className="text-blue-400 text-sm font-mono">{vuln.target}</p>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(vuln.status)}>
                        {vuln.status.toUpperCase()}
                      </Badge>
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                    </div>
                  </div>
                  
                  <p className="text-gray-300 text-sm mb-3 leading-relaxed">{vuln.description}</p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-xs">
                    <div className="bg-gray-800/50 p-3 rounded border border-gray-700/50">
                      <span className="text-gray-400">Impact:</span>
                      <p className="text-red-300 mt-1">{vuln.impact}</p>
                    </div>
                    <div className="bg-gray-800/50 p-3 rounded border border-gray-700/50">
                      <span className="text-gray-400">CVSS Score:</span>
                      <p className="text-orange-300 mt-1 font-mono">{vuln.cvss}/10</p>
                    </div>
                    <div className="bg-gray-800/50 p-3 rounded border border-gray-700/50">
                      <span className="text-gray-400">Exploitability:</span>
                      <p className="text-yellow-300 mt-1">{vuln.exploitability}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};
