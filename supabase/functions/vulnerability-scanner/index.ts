
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { auth: { persistSession: false } }
    )

    const authHeader = req.headers.get('Authorization')!
    const { data: { user } } = await supabase.auth.getUser(authHeader.replace('Bearer ', ''))
    
    if (!user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    const { target, scanType = 'vulnerability_scan' } = await req.json()

    // Create scan record
    const { data: scan, error: scanError } = await supabase
      .from('scans')
      .insert({
        scan_type: scanType,
        target: target,
        status: 'running',
        started_at: new Date().toISOString()
      })
      .select()
      .single()

    if (scanError) {
      console.error('Error creating scan record:', scanError)
      return new Response(JSON.stringify({ error: 'Failed to create scan record' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    // Simulate vulnerability scanning (OpenVAS-style results)
    console.log(`Starting vulnerability scan on ${target}`)
    
    const simulatedVulnerabilities = [
      {
        scan_id: scan.id,
        cve_id: 'CVE-2023-1234',
        title: 'Remote Code Execution in Web Server',
        description: 'A buffer overflow vulnerability exists in the web server that could allow remote code execution',
        severity: 'critical',
        cvss_score: 9.8,
        affected_target: target,
        port: 80,
        service: 'http',
        evidence: { 
          request: 'GET /vulnerable-endpoint HTTP/1.1',
          response: 'HTTP/1.1 500 Internal Server Error'
        },
        remediation: 'Update web server to latest version and apply security patches'
      },
      {
        scan_id: scan.id,
        cve_id: 'CVE-2023-5678',
        title: 'SSL/TLS Weak Cipher Suite',
        description: 'The server supports weak SSL/TLS cipher suites',
        severity: 'medium',
        cvss_score: 5.3,
        affected_target: target,
        port: 443,
        service: 'https',
        evidence: { 
          weak_ciphers: ['TLS_RSA_WITH_RC4_128_MD5', 'TLS_RSA_WITH_3DES_EDE_CBC_SHA']
        },
        remediation: 'Configure server to use only strong cipher suites'
      }
    ]

    // Insert vulnerabilities
    const { error: vulnError } = await supabase
      .from('vulnerabilities')
      .insert(simulatedVulnerabilities)

    if (vulnError) {
      console.error('Error inserting vulnerabilities:', vulnError)
    }

    // Update scan status
    const { error: updateError } = await supabase
      .from('scans')
      .update({
        status: 'completed',
        completed_at: new Date().toISOString(),
        raw_output: JSON.stringify({ vulnerabilities_found: simulatedVulnerabilities.length })
      })
      .eq('id', scan.id)

    if (updateError) {
      console.error('Error updating scan:', updateError)
    }

    return new Response(JSON.stringify({ 
      scan_id: scan.id,
      status: 'completed',
      vulnerabilities_found: simulatedVulnerabilities.length 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('Error in vulnerability-scanner:', error)
    return new Response(JSON.stringify({ error: 'Internal server error' }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})
